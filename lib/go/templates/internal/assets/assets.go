// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../transactions/burn_cogito.cdc (750B)
// ../../../transactions/mint_cogito.cdc (790B)
// ../../../transactions/scripts/is_setup_cogito.cdc (287B)
// ../../../transactions/scripts/read_collection_ids.cdc (466B)
// ../../../transactions/scripts/read_collection_length.cdc (469B)
// ../../../transactions/scripts/read_tokenURI.cdc (419B)
// ../../../transactions/scripts/read_totalSupply.cdc (300B)
// ../../../transactions/setup_account.cdc (820B)
// ../../../transactions/transfer_cogito.cdc (997B)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TransactionsBurn_cogitoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xcf\x6e\xd3\x40\x10\xc6\xef\x7e\x8a\x4f\x3d\xa0\xf4\x12\x73\x40\x1c\x22\xa0\x0a\x29\x46\x39\xe0\x22\x62\x1e\x60\xbd\x9e\xd8\x2b\x9c\x1d\x6b\x76\x96\x16\x55\x7d\x77\x64\x6f\x9c\x5a\x8a\xc0\x27\xaf\x76\xe6\xf7\xfd\x59\x77\x1a\x58\x14\x25\xfb\x22\xfa\xd6\xd5\x3d\x55\xfc\x8b\x3c\x8e\xc2\x27\xbc\x7d\x2a\x8b\x6a\x7b\x7f\xff\xe3\xcb\xe1\x90\x9d\x27\x77\xdc\x3a\xe5\xf9\x7e\xf7\xf0\x75\x5f\x3d\xcc\x23\x59\x9e\xa3\xea\x5c\x40\xb0\xe2\x06\x45\x0c\x14\xa0\x1d\xcd\x4b\x3b\xee\x7b\xb2\xea\xd8\x43\x28\x70\x14\x4b\x50\x46\x43\x41\x85\xff\xc0\xcc\x73\x65\x51\x8d\xa8\xbd\xe2\x14\x83\xa2\x26\x48\xf4\x78\x74\xda\x4d\x34\x63\x2d\x47\xaf\xd0\xce\x28\x3a\x93\x24\xec\x35\x7b\x64\x04\x65\xa1\x06\xce\x23\x1f\x7f\x4d\x4b\x79\x12\x79\xf5\x92\x65\x2a\xc6\x07\x33\x1d\x56\xae\xd9\xe0\xe7\xde\xeb\xfb\x77\xb7\x78\xce\x32\x00\xc8\x73\xf4\x6c\x4d\x8f\xdf\x46\x9c\xa9\x7b\xc2\x91\x65\x22\x3b\xdf\x4e\xe2\x27\xe7\x95\x04\x42\x47\x12\xf2\x96\xa6\xb5\x9e\x74\xe1\x6a\x83\x37\x49\x78\xbd\x54\x1e\xe7\x06\xa1\xc1\x08\xad\x82\x6b\x3d\xc9\x06\xdb\xa8\xdd\x36\x45\xbc\x58\x38\xdb\xa8\x59\x84\x1f\x61\x5e\x95\xc6\xfe\x46\x07\x65\x51\x7d\x9b\x4d\x9c\x9b\x75\x1e\xe7\xc8\x17\x44\xa0\xfe\xb8\x5e\x34\xf5\x11\x49\x74\x9d\xc0\x1f\xae\x2d\x7e\x5a\x8d\x2f\xbd\xc1\xd5\xc5\x21\xa1\xbf\x1b\xed\x6e\x2f\xfc\xf1\xbb\xbb\xc3\x60\xbc\xb3\xab\x9b\x1d\xc7\xbe\x81\x67\xfd\xbf\xef\x45\x49\x37\x09\xf5\x92\x42\xd3\x13\xd9\xa8\x84\xe7\x65\x05\x9f\xa3\xf8\x79\xf3\x5f\xb9\xd6\x75\x14\x5f\x16\xd5\xf4\x98\xae\x99\xa1\x2f\xd9\xdf\x00\x00\x00\xff\xff\x95\x60\x1d\x34\xee\x02\x00\x00"

func TransactionsBurn_cogitoCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsBurn_cogitoCdc,
		"../../../transactions/burn_cogito.cdc",
	)
}

func TransactionsBurn_cogitoCdc() (*asset, error) {
	bytes, err := TransactionsBurn_cogitoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/burn_cogito.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0xf5, 0xd4, 0x29, 0x7a, 0x50, 0x71, 0xf, 0xbb, 0xc5, 0xc5, 0xf0, 0x77, 0xe5, 0xf5, 0x2b, 0x99, 0xf3, 0x27, 0x8b, 0x7, 0xb2, 0x5f, 0xce, 0x49, 0xae, 0x5, 0x1, 0xcb, 0x16, 0xfc, 0x4e}}
	return a, nil
}

var _TransactionsMint_cogitoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xcf\x6e\x9b\x40\x10\xc6\xef\x3c\xc5\xa7\x1c\x5a\xe7\x62\x7a\xb6\xda\x46\x96\x53\xaa\x1c\x4a\xaa\x9a\x17\x18\xc3\x18\x56\x85\x1d\x34\x3b\x5b\x47\x8a\xf2\xee\x15\xff\x6c\x47\x89\xc2\x05\xc4\xee\xfc\xe6\x37\xdf\xae\xeb\x7a\x51\x43\x2e\x3e\x8b\xbe\x76\x87\x96\x0b\xf9\xcb\x1e\x47\x95\x0e\x5f\x9e\xf2\xac\xd8\xde\xdf\xff\xf9\xb1\xdf\x27\xf3\xce\x9d\xd4\xce\x64\x59\xdf\x3d\xfe\x7c\x28\x1e\x97\x2d\x49\x9a\xa2\x68\x5c\x80\x29\xf9\x40\xa5\x39\xf1\x88\x81\x03\xac\x61\xec\xa4\x6d\x79\xfa\xa7\x1c\x24\x6a\xc9\x30\x41\xe7\xbc\x81\xe0\xf9\x84\x3c\x2b\xd6\x49\x9a\x0e\x98\x07\x43\x17\x83\xe1\xc0\xd0\xe8\x71\x72\xd6\x8c\x10\x2a\x4b\x89\xde\x60\x0d\x19\x1a\x9a\xc8\x03\x82\xf5\x4c\x1d\xea\x83\x89\x72\x05\x32\xf4\x64\xcd\x6c\xbd\xbe\x28\xec\x4d\x94\x6a\xfe\x4d\xd6\x24\xc9\x95\xee\xaa\x63\xa3\x8a\x8c\x36\xd8\x9b\x3a\x5f\xdf\xe2\x39\x49\x00\x20\x4d\xd1\x4a\x49\x2d\xfe\x91\x3a\x3a\xb4\x8c\xa3\xe8\xd8\xc7\xf9\xfa\xb5\xc6\x91\x95\x7d\xc9\x63\x59\xcb\x36\x2f\x6c\xf0\xe9\x8d\xc6\x84\xee\x95\x7b\x52\x5e\x05\x57\xfb\x61\xdf\x36\x5a\xb3\x9d\x06\x3d\xb7\x9f\x15\x0e\xa2\x2a\x27\xd0\xa5\xcb\x90\xe1\xd0\x3d\xcf\x8a\x5f\xaf\x73\x80\xf3\xa3\x1f\xd5\x7c\x46\x04\x6e\x8f\xeb\x59\xf4\x1b\xa6\x86\xeb\x09\xfa\xf5\xad\xde\xf7\xd5\x70\xce\x9b\x0f\xe3\xbb\x3d\xb3\x87\xe7\xee\x0e\x3d\x79\x57\xae\x6e\x76\x12\xdb\x0a\x5e\xec\x63\xe7\x39\x9c\x9b\x09\xf3\x32\x0d\xcb\x4f\x5c\x46\x63\x3c\x5f\x8f\x3e\x5e\x94\xa5\x8a\x7c\x85\x8a\x7b\x09\xce\xe0\x6c\xb9\x47\xac\x9f\x03\xca\x4b\xba\xef\x4c\x3d\xbe\xf2\xac\xb8\x3a\xe8\xe5\x6b\x51\x78\x49\xfe\x07\x00\x00\xff\xff\x3d\x70\xdc\x32\x16\x03\x00\x00"

func TransactionsMint_cogitoCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsMint_cogitoCdc,
		"../../../transactions/mint_cogito.cdc",
	)
}

func TransactionsMint_cogitoCdc() (*asset, error) {
	bytes, err := TransactionsMint_cogitoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/mint_cogito.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0x3f, 0x39, 0xdb, 0x77, 0xc, 0xd7, 0x53, 0xa6, 0x7e, 0x18, 0xcd, 0xfa, 0xb2, 0x32, 0xf4, 0xbc, 0xa0, 0x4d, 0x50, 0x13, 0x86, 0x2b, 0xef, 0x7f, 0xb2, 0xda, 0x2e, 0xe8, 0x2f, 0xc2, 0x9a}}
	return a, nil
}

var _TransactionsScriptsIs_setup_cogitoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x4d\x6a\x03\x31\x0c\x85\xf7\x3e\x85\x56\x65\x66\x13\xba\x0e\x6d\x61\xea\x34\xa5\x9b\x24\x34\x73\x01\xdb\x51\x1c\x11\x8f\x34\x38\x32\xb4\x84\xdc\xbd\xd0\xf9\xa1\x34\x5a\x09\xbe\xf7\x1e\x1f\x75\xbd\x64\x85\x8d\xf0\xba\x70\x24\x9f\xb0\x95\x33\x32\x1c\xb3\x74\xf0\xf8\xb5\x59\xb7\xcd\x6a\xf5\xf9\xb6\xdf\x9b\x31\x69\x25\x92\xca\xc4\xed\xf6\xfd\xa3\xdd\x4e\x11\xd3\x17\x0f\xc7\xc2\xd0\x39\xe2\xca\x1d\x0e\x19\x2f\x97\x25\x34\xc3\x53\x2f\xe1\x55\x24\xc1\xd5\x00\x24\x54\x08\x92\x12\x06\x25\xe1\x11\x3c\x43\x44\x6d\x42\x90\xc2\x3a\xb5\x6b\x03\xbf\xb7\x88\xa8\xd6\xf5\xce\x53\x22\xfd\x7e\x7a\xb8\xfe\x37\x5e\xd8\x79\x6e\x57\x7c\xa2\x70\x7b\xa9\x06\xd7\x3b\xb2\x73\x7a\x9a\x77\xc3\x09\xc3\xb9\xaa\x8d\x01\xc8\xa8\x25\xf3\x1f\x2f\x73\xfb\x09\x00\x00\xff\xff\xae\x64\x7a\x23\x1f\x01\x00\x00"

func TransactionsScriptsIs_setup_cogitoCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsScriptsIs_setup_cogitoCdc,
		"../../../transactions/scripts/is_setup_cogito.cdc",
	)
}

func TransactionsScriptsIs_setup_cogitoCdc() (*asset, error) {
	bytes, err := TransactionsScriptsIs_setup_cogitoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/scripts/is_setup_cogito.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdc, 0xd5, 0x8c, 0x12, 0x74, 0xb6, 0x1e, 0xeb, 0x0, 0xa6, 0x0, 0xac, 0xb7, 0x76, 0x72, 0xde, 0xae, 0xd2, 0xb5, 0x40, 0x2e, 0xec, 0x95, 0xf3, 0x18, 0xe6, 0x3b, 0x6a, 0x37, 0x52, 0x73, 0x7}}
	return a, nil
}

var _TransactionsScriptsRead_collection_idsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x4f\x6f\xe2\x30\x10\xc5\xef\xfe\x14\x6f\x39\xac\x92\x0b\xec\x61\xb5\x07\xb4\x14\xa1\x50\x2a\x2e\x80\x20\x3d\x55\x3d\x38\x89\x13\xac\x9a\x99\xc8\x19\xab\x45\x88\xef\x5e\x91\x10\xfa\xcf\x27\x8f\xfc\x7e\x7e\xf3\x9e\x3d\xd4\xec\x05\x2b\xa6\x45\xa0\xca\x66\xce\xa4\xfc\x62\x08\xa5\xe7\x03\xfe\xbc\xad\x16\xe9\x6c\x3e\xdf\xde\xef\x76\xea\xaa\x4c\xb8\xb2\xc2\xfd\x7b\xb2\x7e\x58\xa6\xeb\x5e\xa2\x46\x23\xa4\x7b\xdb\x40\xbc\xa6\x46\xe7\x62\x99\xe0\x8d\x04\x4f\x0d\x34\x41\x7b\xaf\x8f\xe0\x12\xda\x39\xc8\xde\x80\x4a\x81\x2d\x1a\x58\x6a\xc7\x9c\x9d\x33\x2d\xa5\x54\x1d\x32\x94\x81\x70\xd0\x96\x22\x5d\x14\xde\x34\xcd\x18\xb3\xee\x12\x8f\xf1\xf4\xb8\x24\xf9\xf7\xf7\x19\x27\x05\x00\xce\x08\x74\x9e\x73\x20\xc1\x04\x95\x91\x59\x37\xf4\x68\xac\x6e\xb2\x0f\x97\xad\x29\x31\xe9\xb1\x61\x65\x24\xd1\xb5\xce\xac\xb3\x72\x8c\xba\x9c\xc3\xe4\x26\xde\x84\xcc\xd9\x7c\xa3\x65\x1f\xff\x1a\x66\xec\x3d\xbf\xfe\xff\x7d\xfa\x5e\xdc\x0f\xe0\x7c\x17\xc5\xad\xf5\xe5\x4c\xa7\xa8\x35\xd9\x3c\x1a\x24\x1c\x5c\x01\x62\x41\xf7\x15\xf2\x9b\x75\xd7\x6d\xdd\xd2\x9f\x96\x1d\x5c\x23\x74\x7d\x7e\x4d\x71\xd9\x7d\x39\x6f\xa2\x58\x9d\xd5\x7b\x00\x00\x00\xff\xff\xe7\x9c\x7a\x9f\xd2\x01\x00\x00"

func TransactionsScriptsRead_collection_idsCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsScriptsRead_collection_idsCdc,
		"../../../transactions/scripts/read_collection_ids.cdc",
	)
}

func TransactionsScriptsRead_collection_idsCdc() (*asset, error) {
	bytes, err := TransactionsScriptsRead_collection_idsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/scripts/read_collection_ids.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8f, 0x8c, 0x66, 0x39, 0x35, 0x42, 0x80, 0xc0, 0x4d, 0xde, 0xc5, 0xc5, 0x33, 0x9f, 0x79, 0x58, 0xf8, 0xd2, 0xc7, 0x62, 0xc6, 0xbc, 0xd5, 0x45, 0xe1, 0xef, 0x48, 0x37, 0x3e, 0xd, 0x11, 0x2c}}
	return a, nil
}

var _TransactionsScriptsRead_collection_lengthCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x4f\x6f\xea\x30\x10\xc4\xef\xfe\x14\x23\x0e\xef\x25\x97\xf0\xce\xe8\x51\x84\x42\xa9\xb8\x00\x82\x7c\x01\x27\x38\x89\x55\xb3\x1b\xd9\x6b\xb5\x15\xe2\xbb\x57\x10\x02\xfd\xe3\x93\x2d\xcf\x6f\x76\x67\xec\xb1\x63\x2f\x58\x33\x2d\x23\x35\xb6\x74\xa6\xe0\x57\x43\xa8\x3d\x1f\xf1\xef\x7d\xbd\x2c\xe6\x8b\xc5\xee\x79\xbf\x57\x37\x65\xce\x8d\x15\x1e\xfe\xf3\xcd\xcb\xaa\xd8\x0c\x12\x35\x1e\xa3\x68\x6d\x80\x78\x4d\x41\x57\x62\x99\xd0\x18\x09\x90\xd6\xc0\x19\x6a\xa4\x05\xd7\xd0\x04\x5d\x55\x1c\x49\xfe\x06\x50\x2d\xa8\xd8\x39\x73\x95\x2b\xd5\xc5\x12\x75\x24\x1c\xb5\xa5\x44\x1f\x0e\xde\x84\x30\xc1\xbc\xbf\xa4\x13\xac\x48\x70\x52\x00\xe0\x8c\x0c\x3e\x98\x5e\xe6\xcc\xfb\xc7\x40\xa5\xea\x2e\x7b\x0c\xd8\x99\x1a\xd3\x01\xcb\x1a\x23\xb9\xee\x74\x69\x9d\x95\x8f\xa4\xcf\x96\xe5\x77\xf1\x36\x96\xce\x56\x5b\x2d\x6d\x7a\xb5\xba\x9c\xac\x64\xef\xf9\xed\xff\x9f\xd3\xcf\xd2\x7e\x81\xe7\xa7\xe4\xc1\xcd\x66\xe8\x34\xd9\x2a\x19\xe5\x1c\xdd\x01\xc4\x82\xde\x0a\xd5\x7d\x85\xbe\xd7\xee\x4a\x7f\x59\x7a\x74\x8b\xe2\x8d\x44\x4f\xdf\xd3\x5c\x32\xac\x16\x21\x49\xb3\xbe\x60\x75\x56\x9f\x01\x00\x00\xff\xff\x1e\x65\xdf\x17\xd5\x01\x00\x00"

func TransactionsScriptsRead_collection_lengthCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsScriptsRead_collection_lengthCdc,
		"../../../transactions/scripts/read_collection_length.cdc",
	)
}

func TransactionsScriptsRead_collection_lengthCdc() (*asset, error) {
	bytes, err := TransactionsScriptsRead_collection_lengthCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/scripts/read_collection_length.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x75, 0xa4, 0xc4, 0xcb, 0x16, 0x14, 0xa9, 0x19, 0xba, 0x3, 0xd1, 0x85, 0x3d, 0x3e, 0x73, 0x36, 0x2e, 0xa5, 0xdd, 0x90, 0xc8, 0xbf, 0xb9, 0x21, 0x69, 0x7e, 0xb9, 0x5e, 0xea, 0xb6, 0x55, 0x68}}
	return a, nil
}

var _TransactionsScriptsRead_tokenuriCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x41\x6b\x83\x40\x10\x85\xef\xfb\x2b\xe6\x54\x14\x82\xf4\x50\x7a\x90\xa6\x45\x4c\x53\x72\x49\x42\xb5\x3f\x60\xd5\xd5\x0e\x5d\x67\x64\x33\x4b\x5b\x82\xff\xbd\xa8\x51\x42\x7a\x58\x76\xe0\x7b\xef\xf1\x1e\xb6\x1d\x3b\x81\x3d\xd3\xd6\x53\x83\x85\x35\x39\x7f\x19\x82\xda\x71\x0b\xf7\x3f\xfb\x6d\x9e\x6c\x36\xef\xaf\x59\xa6\x2e\xca\x94\x1b\x14\x9e\x79\x7a\x78\xdb\xe5\x87\x59\xa2\x3a\x5f\x40\xed\x09\x5a\x8d\x14\xe8\xaa\x72\xe6\x74\x8a\x21\x99\x8e\x15\x60\x15\xc3\xc7\x8e\xe4\xf1\x21\x8c\x21\x13\x87\xd4\xbc\xc0\x59\x01\x60\x0d\xd6\x08\x94\x6c\xad\x29\x05\x99\x60\x0d\x8d\x91\xa4\x2c\xd9\x93\xcc\x49\x61\xd4\x18\x49\x75\xa7\x0b\xb4\x28\xbf\x4f\x77\x53\x97\x28\x5d\x6c\xe7\xdb\x1d\x57\xec\xe8\x0b\x8b\xe5\x0a\x16\xd3\xf0\xdd\xe2\xfe\x39\xf8\x17\x3a\x91\xa3\x96\xcf\x30\x2a\xd8\x39\xfe\x0e\xc2\xb1\xf5\xd2\x1b\xc5\xb4\xb0\xbe\xaa\x7f\xd1\x4d\x51\xc1\x30\x1b\xab\xd9\x03\xe0\x8c\x78\x47\xa3\x2b\x6a\x8d\xe8\x4a\x8b\x1e\x51\xaf\x86\xa7\x16\x05\xa1\x55\xbd\xfa\x0b\x00\x00\xff\xff\xf3\xd6\x59\x37\xa3\x01\x00\x00"

func TransactionsScriptsRead_tokenuriCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsScriptsRead_tokenuriCdc,
		"../../../transactions/scripts/read_tokenURI.cdc",
	)
}

func TransactionsScriptsRead_tokenuriCdc() (*asset, error) {
	bytes, err := TransactionsScriptsRead_tokenuriCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/scripts/read_tokenURI.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb6, 0xba, 0xc0, 0x7b, 0x79, 0x17, 0x55, 0xce, 0xaf, 0x92, 0x1, 0xa0, 0xae, 0x77, 0x3a, 0xa6, 0x73, 0x94, 0xd, 0x71, 0x38, 0xec, 0xc6, 0xf2, 0x2c, 0x1a, 0xc0, 0x26, 0xff, 0xa6, 0x57, 0xd2}}
	return a, nil
}

var _TransactionsScriptsRead_totalsupplyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xb1\x4e\xc3\x30\x10\x86\x77\x3f\xc5\x3f\xc2\x42\x19\x10\x03\x1b\x6a\x11\xea\x42\xa5\xa6\x3c\xc0\xc5\xb9\x10\x4b\xf1\xd9\xba\x9c\x11\x08\xf1\xee\x28\xb1\x59\xba\x9e\xee\xfb\xbe\x3f\xc4\x9c\xd4\xb0\x4f\x1f\xc1\x12\x46\x4d\x11\xf7\x5f\xfb\xd3\xeb\xf1\x72\x7a\x3e\x1c\xce\x2f\x5d\xe7\xdc\x6e\x87\xcb\x14\x16\x2c\x5e\x43\x36\x28\xd3\xb0\xc0\x26\x86\x2f\xaa\x2c\x06\x29\xb1\x67\x45\x1a\xe1\xab\xc7\x26\x32\x4c\xf4\xc9\xe8\x99\x05\x31\x88\xf1\xb0\x7a\xb6\xc0\x8a\xb6\xa0\x4f\x62\x4a\xde\x40\x32\x40\xd9\x8a\xca\x52\xe9\xe6\xdc\x64\x0c\x4f\xf3\xcc\xba\x4d\x39\xd7\xaf\x27\xbc\x1f\xc5\x1e\x1f\xd6\xd3\xdb\x75\xbf\x06\x6b\xed\xaa\xe4\x5c\x2e\x3d\xc6\x22\x88\x14\xe4\xe6\xf6\xdf\x83\x1f\xe7\x00\xb4\x11\x8d\xba\xb3\x64\x34\x77\x25\xe7\xf9\xdb\xfd\xfe\x05\x00\x00\xff\xff\xe9\x48\xc5\x1b\x2c\x01\x00\x00"

func TransactionsScriptsRead_totalsupplyCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsScriptsRead_totalsupplyCdc,
		"../../../transactions/scripts/read_totalSupply.cdc",
	)
}

func TransactionsScriptsRead_totalsupplyCdc() (*asset, error) {
	bytes, err := TransactionsScriptsRead_totalsupplyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/scripts/read_totalSupply.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x54, 0x8a, 0x81, 0x90, 0x56, 0x50, 0x7f, 0xc, 0xcc, 0xe7, 0xe0, 0xda, 0x50, 0xf6, 0x9d, 0x87, 0xd1, 0x54, 0xce, 0xcf, 0x39, 0xe3, 0x47, 0x94, 0xf4, 0x77, 0xc7, 0x59, 0x79, 0x32, 0x51, 0xb3}}
	return a, nil
}

var _TransactionsSetup_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\x4d\x6f\xda\x40\x10\xbd\xfb\x57\xbc\x53\x6b\x24\x12\x7a\x8e\x48\x24\x44\x92\xaa\x97\x24\x2a\xfc\x81\x61\x19\xdb\xa3\x2c\x3b\xd6\x7a\xdc\x14\x21\xfe\x7b\xb5\xd8\x06\x1a\x12\x65\x0e\xf6\xe1\xbd\x79\x1f\xa3\x95\x4d\xad\xd1\xf0\xa4\xe1\xb1\x0d\xa5\xac\x3c\x2f\xf5\x95\x03\x8a\xa8\x1b\xfc\xf8\xfb\xf4\xb8\x9c\xdd\xdf\xff\x7e\x58\x2c\xb2\x9e\x39\xd7\x52\x4c\x07\x7c\xfe\xfc\xf3\xd7\xf2\x79\xa0\x64\x93\x09\x96\x95\x34\xb0\x48\xa1\x21\x67\xa2\x01\x4e\x43\x21\x65\x1b\xb9\x01\x05\x90\x73\xda\x06\x83\x29\x2a\xf5\x6b\x50\x58\x63\x23\x61\xd0\xbd\xce\xb2\xf3\xdd\x5d\x06\x00\x75\xe4\x9a\x22\xe7\x8d\x94\x81\xe3\x0d\x66\xad\x55\xb3\x4e\x67\xd4\x53\xd2\x4c\x26\x90\x02\x56\xf1\xd1\x64\xad\xdc\x84\xef\x06\xf2\x91\x69\xbd\x45\x45\x7f\x18\x04\xa7\xde\xf3\xc1\xe0\xb8\x2b\x05\x3a\xf5\xeb\x95\xc6\xa8\x6f\xd3\x6f\x7d\x9e\xf9\x91\x7b\x97\xa7\xce\x37\xb8\x00\x16\xa6\x91\x4a\x7e\x21\xab\x46\xb8\xbd\x45\x10\x8f\x5d\x76\x94\xee\xa3\xb9\xc8\x64\xc9\x3d\xf0\x1b\x78\x53\xdb\xf6\xa3\x1c\x69\x3c\xdb\x19\x84\xe9\xd5\x60\xd9\x49\x3c\xa4\xdd\x93\x7b\x3e\xba\xb0\x6a\x52\x4d\x39\xdc\xf8\xec\x1a\xff\xb1\xfa\xb2\x89\x99\x4f\xaf\x4e\x6e\x63\x98\x7e\x51\xf1\xf3\x66\x75\xbb\xf2\xe2\xe0\xa8\xa6\x95\x78\xb1\x2d\x0a\x8d\x87\x08\x9f\x34\xed\x53\x78\x09\xaf\x1f\x1c\x7c\xf7\xfe\x51\x9e\x61\x2f\x07\xab\xf1\x29\x69\xfa\xbd\x87\xf7\x77\xf9\x85\x68\x87\xa4\x22\x63\x18\xc5\x92\xed\xab\xba\x43\xd8\x7d\xd6\x7d\xf7\xd9\xbf\x00\x00\x00\xff\xff\xbe\x95\xef\x82\x34\x03\x00\x00"

func TransactionsSetup_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsSetup_accountCdc,
		"../../../transactions/setup_account.cdc",
	)
}

func TransactionsSetup_accountCdc() (*asset, error) {
	bytes, err := TransactionsSetup_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/setup_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0x33, 0xc, 0x55, 0x93, 0xd, 0xe2, 0x5b, 0x9f, 0x1f, 0x9d, 0x8d, 0x32, 0x70, 0x2d, 0xba, 0xf1, 0x9, 0x4d, 0xf7, 0xfc, 0xdf, 0xd0, 0xe4, 0x57, 0x79, 0xda, 0x27, 0xf4, 0x9b, 0x9e, 0x4b}}
	return a, nil
}

var _TransactionsTransfer_cogitoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xcd\x6e\x9b\x40\x10\xbe\xf3\x14\x93\x1c\x5a\x2c\x35\xb8\x87\xaa\x07\xe4\x24\xb2\x70\x5d\xf9\xe2\x44\x31\x7d\x80\x65\x19\x60\x5b\xb2\x83\x76\x87\xba\x55\xe4\x77\xaf\x96\xc5\x10\x4a\x1c\x4e\x2b\xf6\x9b\xf9\x7e\xf6\x53\xcf\x0d\x19\x86\x3d\xe9\x6d\xab\x4b\x95\xd5\x98\xd2\x2f\xd4\x50\x18\x7a\x86\xcf\x7f\xf6\xdb\x74\xbd\xd9\x3c\x7d\x3b\x1c\x82\x1e\x99\x50\xa9\x98\xce\xf7\xc9\xc3\xf7\x5d\xfa\x70\x86\x04\xcb\x25\xa4\x95\xb2\xc0\x46\x68\x2b\x24\x2b\xd2\xfe\x5c\xa0\xb1\x20\x26\xc3\xa4\x11\x84\x94\xd4\x6a\x06\x26\x10\x9a\xb8\x42\x13\x05\xc1\xab\xe1\xd0\xa0\x54\x8d\x42\xcd\x31\xac\xf3\xdc\xa0\xb5\x9f\xe0\xa8\xb8\xca\x8d\x38\xee\x36\x31\xfc\xd8\x69\xfe\xfa\x65\x01\x2f\x01\x00\x40\x63\xb0\x11\x06\x43\xab\x4a\x8d\x26\x86\x75\xcb\xd5\xda\x53\x38\x48\x87\x71\xdf\x72\x09\x25\x32\x70\x85\x30\x10\x58\x68\xda\xac\x56\x72\xd0\x44\xd9\x4f\x94\x3c\xcc\xd4\xc8\x23\x18\x6e\xdd\x82\x7e\xf5\x28\x72\x31\xa1\xc8\xc8\x18\x3a\x82\x00\x83\x05\x1a\xd4\x12\x9d\x4f\x47\xea\xf5\x7d\xb4\xb0\xdf\xa6\x20\xa9\xae\xb1\x73\x3b\xe1\x1a\x7f\x3f\x61\x01\xb7\xfd\x4c\xe4\x97\xae\x3e\xf8\x24\xa3\x64\x40\xdd\x85\x2e\xd5\x18\x66\x17\x07\x26\x23\x4a\x7c\x14\x5c\x2d\x06\x06\xf7\xdd\xdf\x43\x23\xb4\x92\xe1\x75\x42\x6d\x9d\x83\x26\x7e\x47\x33\x1d\xbd\xe4\x51\xd7\xf5\x05\xbb\x7d\x8e\xb3\x0d\x06\x25\xaa\xdf\xae\x08\x17\x2c\xe7\xd8\x90\x55\xec\xfd\x0e\xa1\x46\x25\x72\x22\x1a\x91\xa9\x5a\xf1\xdf\x70\xe6\xef\xb1\xa3\xeb\xec\x5d\x0d\xf1\xbc\xfc\x5f\xe8\xd9\xc0\xe9\x2e\x5c\x5c\x4d\x0c\x9c\x7b\xd5\x89\x75\x2f\xd3\xd5\xf4\x6d\xef\x13\xdd\xba\x60\x58\xdd\x4c\x5f\x2c\x3a\x6f\x0b\x5f\xd7\x75\x3c\x4f\xb3\xdb\x78\xe7\x03\xb3\xd2\xd3\x72\xbe\xcd\x3d\xe6\x15\xf5\xc7\x90\x9d\xd7\x18\x56\x37\xba\x60\xff\xda\xa7\xe0\x14\xfc\x0b\x00\x00\xff\xff\x2d\xcb\x9d\x09\xe5\x03\x00\x00"

func TransactionsTransfer_cogitoCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsTransfer_cogitoCdc,
		"../../../transactions/transfer_cogito.cdc",
	)
}

func TransactionsTransfer_cogitoCdc() (*asset, error) {
	bytes, err := TransactionsTransfer_cogitoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/transfer_cogito.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe2, 0x5a, 0xe7, 0x8f, 0x5, 0x1a, 0xf1, 0x5e, 0xde, 0xff, 0xcf, 0x69, 0xa3, 0x8b, 0x75, 0x51, 0x2c, 0xb6, 0xc0, 0xc6, 0x1d, 0x2c, 0x74, 0x81, 0xa4, 0xfa, 0x80, 0xb6, 0x73, 0x78, 0xc7, 0x69}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../transactions/burn_cogito.cdc":                    TransactionsBurn_cogitoCdc,
	"../../../transactions/mint_cogito.cdc":                    TransactionsMint_cogitoCdc,
	"../../../transactions/scripts/is_setup_cogito.cdc":        TransactionsScriptsIs_setup_cogitoCdc,
	"../../../transactions/scripts/read_collection_ids.cdc":    TransactionsScriptsRead_collection_idsCdc,
	"../../../transactions/scripts/read_collection_length.cdc": TransactionsScriptsRead_collection_lengthCdc,
	"../../../transactions/scripts/read_tokenURI.cdc":          TransactionsScriptsRead_tokenuriCdc,
	"../../../transactions/scripts/read_totalSupply.cdc":       TransactionsScriptsRead_totalsupplyCdc,
	"../../../transactions/setup_account.cdc":                  TransactionsSetup_accountCdc,
	"../../../transactions/transfer_cogito.cdc":                TransactionsTransfer_cogitoCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"transactions": {nil, map[string]*bintree{
					"burn_cogito.cdc": {TransactionsBurn_cogitoCdc, map[string]*bintree{}},
					"mint_cogito.cdc": {TransactionsMint_cogitoCdc, map[string]*bintree{}},
					"scripts": {nil, map[string]*bintree{
						"is_setup_cogito.cdc": {TransactionsScriptsIs_setup_cogitoCdc, map[string]*bintree{}},
						"read_collection_ids.cdc": {TransactionsScriptsRead_collection_idsCdc, map[string]*bintree{}},
						"read_collection_length.cdc": {TransactionsScriptsRead_collection_lengthCdc, map[string]*bintree{}},
						"read_tokenURI.cdc": {TransactionsScriptsRead_tokenuriCdc, map[string]*bintree{}},
						"read_totalSupply.cdc": {TransactionsScriptsRead_totalsupplyCdc, map[string]*bintree{}},
					}},
					"setup_account.cdc": {TransactionsSetup_accountCdc, map[string]*bintree{}},
					"transfer_cogito.cdc": {TransactionsTransfer_cogitoCdc, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
