// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../transactions/mint_nft.cdc (1.089kB)
// ../../../transactions/scripts/get_totalSupply.cdc (300B)
// ../../../transactions/scripts/read_collection_ids.cdc (453B)
// ../../../transactions/scripts/read_collection_length.cdc (448B)
// ../../../transactions/scripts/read_nft_by_id.cdc (593B)
// ../../../transactions/setup_account.cdc (804B)
// ../../../transactions/transfer_nft.cdc (1.091kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TransactionsMint_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xcd\x8e\xd3\x30\x10\xbe\xe7\x29\x46\x3d\x40\x7a\x69\x38\x57\xb0\xab\xd2\x25\x68\x0f\x64\x11\x9b\x17\x70\x9c\x69\x32\xc2\xb1\x23\x7b\xbc\x5d\x54\xf5\xdd\x91\xf3\x9f\xaa\x82\x5e\x1a\xc9\x33\xdf\xaf\x4d\x4d\x6b\x2c\x43\x66\x74\xea\x75\x45\x85\xc2\xdc\xfc\x46\x0d\x27\x6b\x1a\xf8\xf4\x9e\xa5\xf9\xe1\xe9\xe9\xd7\xb7\xd7\xd7\x68\x98\x3c\x9a\x8a\xd8\x8c\xe7\xc7\x97\xef\xcf\xf9\xcb\x38\x12\x25\x09\xe4\x35\x39\x70\xd2\x52\xcb\xe0\x1d\x3a\xe0\x1a\x87\xa5\x1f\xa4\x19\x2d\x58\x74\xc6\x5b\x89\xc0\x06\x1a\xd2\x0c\x02\x34\x9e\x47\xe0\x2c\xcd\x03\xcc\x33\x43\xe3\x1d\x43\x81\x60\xbd\x86\x33\x71\xdd\x21\x09\x29\x8d\xd7\x0c\x5c\x0b\x86\x5a\xf4\xf0\xcd\x1a\x38\xec\x3b\x36\x16\x4b\x20\x0d\x49\xf8\x14\x15\x26\x4b\x11\x51\xc4\x56\x68\x27\x24\x93\xd1\xb1\x45\x49\x2d\xa1\xe6\x3d\x1c\xca\xd2\xa2\x73\x5b\xb8\x44\x11\x00\x40\x92\x80\x32\x52\x28\x78\x13\x96\x44\xa1\x10\x4e\xc6\x76\xe8\xa4\xab\x35\xf9\x09\x2d\x6a\x89\xdd\x9a\x42\x1e\x0e\xf6\xf0\xa1\x27\xde\xad\xf9\xc3\x54\x6b\xb1\x15\x16\x63\x47\x95\x0e\x93\x07\xcf\xf5\xa1\x37\x38\x09\x18\x44\x14\xc6\x5a\x73\x06\x31\xf3\x84\xf8\x02\x7f\x96\xe6\xb7\xc1\x92\x86\xc1\xf4\x04\xe1\x50\x9d\x76\x83\xd4\x2f\xd0\x13\xee\x7a\xd0\xcf\xf7\x04\x3e\xc4\xa1\xe1\xfd\xfd\xf4\xb6\x13\x6c\xf8\x3d\x3e\x42\x2b\x34\xc9\x78\x73\x34\x5e\x95\xa0\x0d\xff\x5b\xee\x90\xcc\xa6\x87\xb9\xf6\x3e\xf1\x1d\xa5\x67\x84\xcb\xd2\xf5\xd7\x1e\x26\xec\x4d\x1d\x7d\x74\xd0\xfa\x42\x91\xec\xa0\xa4\x51\x0a\xbb\x16\x6f\x1a\x18\x5b\xb0\x28\x91\xde\x3a\xd7\x15\xf2\x90\xee\xdc\xf8\xda\xca\xae\x42\x3e\x8a\x56\x14\xa4\x88\xff\xc4\x49\x4f\x34\x78\x3f\x4e\x54\x37\x4b\x63\x8c\x97\xdb\x57\xb4\x9b\x57\x7e\x76\x48\xd7\x87\xf8\xff\xd9\x55\x4b\xd5\x77\xf3\x9b\x61\x37\xdb\xd5\x2d\x09\xf5\x4c\x53\x42\x97\x50\x62\x6b\x1c\x31\x10\x8f\xfb\xcb\x1c\xe7\xf0\xee\xdd\x93\xee\x2f\x4b\xf3\xe5\xf3\x18\x75\x8d\xd5\x5d\xa3\xbf\x01\x00\x00\xff\xff\xf4\x6e\xb9\x6d\x41\x04\x00\x00"

func TransactionsMint_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsMint_nftCdc,
		"../../../transactions/mint_nft.cdc",
	)
}

func TransactionsMint_nftCdc() (*asset, error) {
	bytes, err := TransactionsMint_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/mint_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0x40, 0xb, 0xb1, 0x59, 0xf6, 0x57, 0x85, 0x7c, 0xdb, 0xe4, 0x92, 0x80, 0x29, 0x3e, 0x68, 0x90, 0x7e, 0x94, 0x86, 0x5d, 0x47, 0x23, 0x1f, 0xbc, 0x9e, 0x3, 0xbf, 0x5b, 0xfc, 0xd2, 0x62}}
	return a, nil
}

var _TransactionsScriptsGet_totalsupplyCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xb1\x4e\xc3\x30\x10\x86\x77\x3f\xc5\x3f\xc2\x42\x19\x10\x03\x1b\x6a\x11\xea\x42\xa5\xa6\x3c\xc0\xc5\xb9\x10\x4b\xf1\xd9\xba\x9c\x11\x08\xf1\xee\x28\xb1\x59\xba\x9e\xee\xfb\xbe\x3f\xc4\x9c\xd4\xb0\x4f\x1f\xc1\x12\x46\x4d\x11\xf7\x5f\xfb\xd3\xeb\xf1\x72\x7a\x3e\x1c\xce\x2f\x5d\xe7\xdc\x6e\x87\xcb\x14\x16\x2c\x5e\x43\x36\x28\xd3\xb0\xc0\x26\x86\x2f\xaa\x2c\x06\x29\xb1\x67\x45\x1a\xe1\xab\xc7\x26\x32\x4c\xf4\xc9\xe8\x99\x05\x31\x88\xf1\xb0\x7a\xb6\xc0\x8a\xb6\xa0\x4f\x62\x4a\xde\x40\x32\x40\xd9\x8a\xca\x52\xe9\xe6\xdc\x64\x0c\x4f\xf3\xcc\xba\x4d\x39\xd7\xaf\x27\xbc\x1f\xc5\x1e\x1f\xd6\xd3\xdb\x75\xbf\x06\x6b\xed\xaa\xe4\x5c\x2e\x3d\xc6\x22\x88\x14\xe4\xe6\xf6\xdf\x83\x1f\xe7\x00\xb4\x11\x8d\xba\xb3\x64\x34\x77\x25\xe7\xf9\xdb\xfd\xfe\x05\x00\x00\xff\xff\xe9\x48\xc5\x1b\x2c\x01\x00\x00"

func TransactionsScriptsGet_totalsupplyCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsScriptsGet_totalsupplyCdc,
		"../../../transactions/scripts/get_totalSupply.cdc",
	)
}

func TransactionsScriptsGet_totalsupplyCdc() (*asset, error) {
	bytes, err := TransactionsScriptsGet_totalsupplyCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/scripts/get_totalSupply.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x54, 0x8a, 0x81, 0x90, 0x56, 0x50, 0x7f, 0xc, 0xcc, 0xe7, 0xe0, 0xda, 0x50, 0xf6, 0x9d, 0x87, 0xd1, 0x54, 0xce, 0xcf, 0x39, 0xe3, 0x47, 0x94, 0xf4, 0x77, 0xc7, 0x59, 0x79, 0x32, 0x51, 0xb3}}
	return a, nil
}

var _TransactionsScriptsRead_collection_idsCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xcd\x4e\xc2\x40\x14\x85\xf7\xf3\x14\x27\x2c\x4c\xbb\xa1\x2e\x8c\x0b\xa2\x12\x52\xc4\xb0\x01\x03\x75\x65\x5c\x4c\xdb\x69\x99\x38\xdc\xdb\x4c\xef\x44\x09\xe1\xdd\x0d\xad\xfc\x68\x77\xcd\x9c\xef\x9b\x39\xc7\x6e\x1b\xf6\x82\x05\xd3\x2c\x50\x6d\x73\x67\x32\xfe\x34\x84\xca\xf3\x16\xb7\xdf\x8b\x59\x36\x99\x4e\x57\xcf\xeb\xb5\xfa\x4d\xa6\x5c\x5b\xe1\xd3\x79\xba\x7c\x99\x67\xcb\x53\x44\x25\x09\xb2\x8d\x6d\x21\x5e\x53\xab\x0b\xb1\x4c\xf0\x46\x82\xa7\x16\x9a\xa0\xbd\xd7\x3b\x70\x05\xed\x1c\x64\x63\x40\x95\xc0\x96\x2d\x2c\x75\xbf\x05\x3b\x67\x3a\x4a\xa9\x26\xe4\xa8\x02\x61\xab\x2d\x45\xba\x28\x38\x90\x8c\x30\x29\x4b\x6f\xda\x36\x1e\xe1\xfd\x6d\x4e\x72\x7f\xf7\x81\xbd\x02\x00\x67\xe4\x0a\x5f\x99\x0a\x8f\xa8\x8d\x4c\x7a\xf0\x24\x88\xbb\xec\xf1\x1b\xd6\x46\x52\xdd\xe8\xdc\x3a\x2b\xbb\x28\x69\x42\xee\x6c\x91\xf4\xed\xd2\xb3\xe8\x0a\xc8\xd9\x7b\xfe\x7a\xb8\xd9\xff\xdf\x6a\x78\x89\xbf\x76\x96\xc3\x53\x74\xe1\xc6\x63\x34\x9a\x6c\x11\x0d\x52\x0e\xae\x04\xb1\xa0\x57\xa1\x38\xdf\xdf\xcf\xd9\xbf\xe1\xaa\xc6\x20\x56\x9d\xa7\x9f\xf0\x6f\xbf\x63\x81\xf9\xb4\x8d\x62\x75\x50\x3f\x01\x00\x00\xff\xff\x12\xc5\xaf\x08\xc5\x01\x00\x00"

func TransactionsScriptsRead_collection_idsCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsScriptsRead_collection_idsCdc,
		"../../../transactions/scripts/read_collection_ids.cdc",
	)
}

func TransactionsScriptsRead_collection_idsCdc() (*asset, error) {
	bytes, err := TransactionsScriptsRead_collection_idsCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/scripts/read_collection_ids.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x55, 0x1b, 0x2c, 0x5f, 0x61, 0x57, 0xa5, 0x8f, 0x60, 0x69, 0xb, 0x8, 0xfb, 0x47, 0x82, 0x72, 0x8b, 0xd1, 0xb1, 0x27, 0x1d, 0x32, 0x31, 0x20, 0x90, 0xd7, 0xa, 0x22, 0xa2, 0x24, 0x5, 0x32}}
	return a, nil
}

var _TransactionsScriptsRead_collection_lengthCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xcd\x6e\xe2\x30\x14\x85\xf7\x7e\x8a\x23\x16\x33\xc9\x86\xcc\x1a\x4d\x8b\x50\x28\x15\x1b\xa8\x20\x2f\xe0\x18\x27\x58\x35\xf7\x46\xf6\xb5\xda\x0a\xf1\xee\x15\x09\x7f\x6d\xb6\xf9\xbe\x73\x7d\x8e\x3b\x74\x1c\x04\x2b\xa6\x45\xa2\xd6\xd5\xde\x56\xfc\x6e\x09\x4d\xe0\x03\xfe\x7d\xae\x16\xd5\x6c\x3e\xdf\xbc\x6c\xb7\xea\x42\x96\xdc\x3a\xe1\xeb\xff\x72\xfd\xba\xac\xd6\x57\x44\x15\x05\xaa\xbd\x8b\x90\xa0\x29\x6a\x23\x8e\x09\xad\x95\x08\xd9\x5b\x78\x4b\xad\xec\xc1\x0d\x34\x41\x1b\xc3\x89\xe4\x6f\x04\x35\x02\xc3\xde\xdb\x1e\x57\xaa\x4b\x35\x9a\x44\x38\x68\x47\xd9\x05\x9b\x60\xb6\xdb\x05\x1b\x63\x3e\xc1\x92\x04\x47\x05\x00\xde\x3e\x9a\x1b\xdb\xe0\xe9\x7c\x6d\x36\x38\x57\x37\xef\xd9\xf3\x37\x6e\xad\x94\xba\xd3\xb5\xf3\x4e\xbe\xb2\xa2\x4b\xb5\x77\xa6\x18\x1a\x95\xb7\xa0\x07\xa1\xe6\x10\xf8\xe3\xff\x9f\xe3\xef\x7d\xc6\x77\xfc\xad\x4f\x39\x3d\x67\x77\x6f\x3a\x45\xa7\xc9\x99\x6c\x54\x72\xf2\x3b\x10\x0b\x86\x28\x98\xdb\xfd\x61\xc2\xe1\x0d\x0f\x35\x46\xb9\xea\x73\x82\x95\x14\xe8\x67\xbf\x73\x81\xe5\x3c\x66\xf9\x78\xd8\x52\x9d\xd4\x77\x00\x00\x00\xff\xff\x18\x71\xf6\x0a\xc0\x01\x00\x00"

func TransactionsScriptsRead_collection_lengthCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsScriptsRead_collection_lengthCdc,
		"../../../transactions/scripts/read_collection_length.cdc",
	)
}

func TransactionsScriptsRead_collection_lengthCdc() (*asset, error) {
	bytes, err := TransactionsScriptsRead_collection_lengthCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/scripts/read_collection_length.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5b, 0x9d, 0x70, 0x9e, 0x1a, 0x96, 0x82, 0xb8, 0x9, 0xc1, 0xe, 0x78, 0xac, 0xdc, 0xcd, 0x5, 0xe1, 0x64, 0x51, 0xaf, 0x7d, 0x72, 0x4f, 0x85, 0x6a, 0x35, 0xde, 0x99, 0x76, 0xee, 0x72, 0x4b}}
	return a, nil
}

var _TransactionsScriptsRead_nft_by_idCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xcf\x6e\xd3\x40\x10\xc6\xef\x7e\x8a\x4f\x3d\x80\x73\x89\x41\x42\x1c\x22\x4a\x15\x5c\x52\xf5\x92\xa2\xd6\x3c\xc0\x7a\x3d\x4e\x47\x38\x33\xd6\xee\xac\x0a\xaa\xfa\xee\xc8\x76\x9c\x1a\xea\x9b\x35\xdf\x1f\x7d\xbf\xe5\x63\xaf\xc1\xb0\x57\xd9\x25\x39\x70\xdd\x51\xa5\xbf\x48\xd0\x06\x3d\xe2\xc3\xef\xfd\xae\xda\x5e\x5f\xdf\x7f\x7f\x78\xc8\x4e\xca\x52\x0f\x6c\x3a\xdf\xcb\xbb\x9b\xdb\xea\x6e\x96\x64\x45\x81\xea\x91\x23\xa2\x0f\xdc\x1b\x02\xb9\x26\xe2\x48\xe6\x1a\x67\x0e\xae\xd6\x64\x70\x82\xfd\xae\x02\x0b\x1c\x52\xa4\xf0\x3e\xc2\x6b\xd7\x91\x37\x56\xc9\xfa\x54\xa3\x4d\x82\xa3\x63\xc9\x9d\xf7\x9a\xc4\x36\xd8\x36\x4d\xa0\x18\x57\x1b\xfc\xbc\x15\xfb\xfc\x09\xcf\x59\x06\x00\x45\x81\x1b\x32\xd8\x23\xa1\x4f\x75\xc7\x7e\x11\x05\x6d\xc7\x83\x3e\x09\x85\xf9\xc7\x86\x71\xa3\xb5\x23\x5b\x88\xef\xa9\xc5\x25\x0e\x64\xdb\xa9\x72\xae\x5e\x8d\xda\xe1\x5b\x1f\xc8\x4a\xd7\xbb\x9a\x3b\xb6\x3f\x79\x31\xf5\x15\x13\x8e\xf2\x1c\xb4\x30\xd4\x1a\x82\x3e\x7d\x79\xf7\xfc\x3f\xdc\xf5\xab\xfc\xc7\x98\xf2\xf2\x35\x7f\xf5\x5d\x5d\xa1\x77\xc2\x3e\xbf\x28\x35\x75\x0d\x44\x0d\x53\x14\xfc\xb9\x7f\xe2\xff\x66\xf3\xc5\xea\xcc\xe5\xdb\x64\x71\x08\xd4\x52\x20\xf1\xc3\x78\x38\xc4\x9e\x3c\xb7\xec\xe7\x47\x18\xa8\x2c\xf8\xcf\x68\xa4\x35\x5c\xfe\x0b\xe8\x34\x68\xbf\xab\x72\x6e\x36\xf8\x78\xea\x0a\x64\x29\xc8\x60\x58\x73\x93\xbd\xfc\x0d\x00\x00\xff\xff\xb0\xa1\xbd\xb7\x51\x02\x00\x00"

func TransactionsScriptsRead_nft_by_idCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsScriptsRead_nft_by_idCdc,
		"../../../transactions/scripts/read_nft_by_id.cdc",
	)
}

func TransactionsScriptsRead_nft_by_idCdc() (*asset, error) {
	bytes, err := TransactionsScriptsRead_nft_by_idCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/scripts/read_nft_by_id.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xef, 0xce, 0x75, 0xf0, 0xfd, 0x8c, 0x94, 0x42, 0x9b, 0x45, 0x6c, 0x53, 0xd, 0xfa, 0xf7, 0x90, 0x41, 0xbd, 0x11, 0x2, 0xe8, 0x15, 0xbc, 0xbd, 0xb0, 0x6c, 0xe2, 0x44, 0xa1, 0x91, 0x94, 0x8e}}
	return a, nil
}

var _TransactionsSetup_accountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xcf\x6e\xda\x40\x10\xc6\xef\x7e\x8a\xaf\x97\xc8\x48\x09\xee\x39\xa2\x91\x10\x09\x55\x2f\xa4\x4a\xfc\x02\xc3\x66\x8c\x57\x59\x76\xad\xd9\x71\x28\x42\xbc\x7b\xb5\x76\x30\xb8\x8d\xd8\xe3\xfa\x37\xf3\xfd\x59\xdb\x6d\x13\x44\xb1\x0a\x7e\xd9\xfa\x8d\x5d\x3b\x2e\xc3\x3b\x7b\x54\x12\xb6\xf8\xfe\x67\xb5\x2c\xe7\x8f\x8f\x2f\x4f\xaf\xaf\xd9\x27\xb9\x08\x1b\xab\xe1\xf4\x7d\xf1\xfc\xf3\x57\xf9\x7c\x42\x8a\x02\x65\x6d\x23\x54\xc8\x47\x32\x6a\x83\x87\x8d\xd8\xd5\xa4\x20\x0f\x32\x26\xb4\x5e\xb1\x0b\xad\x7b\x83\xb4\x3e\x0d\x68\x40\x64\x85\xd5\xc8\xae\x42\xdb\xa4\x0b\x61\xc3\xf6\x83\xb1\x5a\x96\x31\xcb\x2e\xb7\x1d\xb2\x0c\x00\x1a\xe1\x86\x84\x73\x32\x46\xef\x31\x6f\xb5\x9e\xf7\xbb\x27\x27\x22\x9d\xa2\xc0\x0b\x6b\x2b\x1e\x4c\xe2\xf6\xb0\x15\xb4\xe6\xc1\x06\x39\x61\x7a\xdb\xa3\xa6\x08\x82\x09\xce\x71\x27\x32\xcc\xdb\x2a\xb1\x3a\x5d\x07\x91\xb0\x9b\xdd\xf4\xd1\xa7\x8b\x81\x7c\xc8\x53\x0d\xf7\x28\xa2\x06\xa1\x0d\x17\x3d\x71\x06\x26\xf8\xf6\x03\xde\x3a\x1c\x86\xa5\xe9\x48\xe7\x6a\xb8\x3a\x8e\x2c\x2f\x84\x49\x19\x04\xcf\x3b\xf0\xb6\xd1\xfd\x57\xde\x1c\xeb\xc5\x35\x66\x77\x9f\x0f\x33\x35\xdd\xf8\x53\x9a\x3b\xfb\xc8\x27\x23\x89\x48\x1f\x0c\xab\xa9\xea\x8b\x42\x06\xa2\x0b\x9d\x98\x7c\x76\x77\xd6\xb8\x85\x86\x6b\x51\x47\x0a\xe6\x14\xa2\x69\xd7\xce\x1a\x18\x6a\x68\x6d\x9d\xd5\x3d\xaa\x20\x9d\xea\x17\xa1\x3a\x61\x67\xfd\xfb\xec\xe6\xf0\xef\x1f\x79\x51\xfb\xef\x6e\xe7\xf1\x21\x1f\x95\x5a\xf4\x52\xff\x19\xbb\x1d\x51\x4a\xb2\x61\xbd\x92\x63\xa0\x27\x59\xff\x36\xc7\xec\x6f\x00\x00\x00\xff\xff\x8c\x06\xf0\x6b\x24\x03\x00\x00"

func TransactionsSetup_accountCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsSetup_accountCdc,
		"../../../transactions/setup_account.cdc",
	)
}

func TransactionsSetup_accountCdc() (*asset, error) {
	bytes, err := TransactionsSetup_accountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/setup_account.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0xc0, 0x66, 0xe7, 0xc0, 0xbf, 0xcf, 0xc, 0x63, 0xc6, 0xcf, 0xd8, 0x91, 0x51, 0xdf, 0x2b, 0x7a, 0x75, 0xc5, 0x0, 0xc9, 0x1c, 0xd5, 0x7c, 0x97, 0xc6, 0x1a, 0x32, 0x2a, 0xb1, 0x87, 0x3c}}
	return a, nil
}

var _TransactionsTransfer_nftCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\xc1\x6e\xd3\x40\x10\x86\xef\x7e\x8a\x51\x0f\xe0\x48\x34\xe6\x80\x38\x44\x69\xab\x28\x21\x28\x97\x14\xb5\xe6\x01\xd6\xeb\xb1\xbd\xe0\xee\x58\xb3\x63\x02\xaa\xf2\xee\x68\xbd\xb1\x1d\x03\x29\x87\xfa\xb4\xda\xcc\xfc\xff\xfc\xdf\x4e\xcc\x53\x43\x2c\xb0\x27\xbb\x6d\x6d\x69\xb2\x1a\x53\xfa\x8e\x16\x0a\xa6\x27\x78\xff\x73\xbf\x4d\x57\x9b\xcd\xc3\xa7\xc7\xc7\xe8\x54\xb9\xa6\xd2\x08\xf5\xbf\xaf\xef\x3f\xef\xd2\xfb\xbe\x24\x4a\x12\x48\x2b\xe3\x40\x58\x59\xa7\xb4\x18\xb2\x60\x1c\x14\xc4\xe1\xaa\x40\x66\x63\x4b\x50\x36\x87\xfd\x36\xed\x54\x7c\x13\x59\x04\xa5\x35\xb5\x56\x40\x08\x94\x25\xa9\x90\xa3\xe8\x4c\x27\x66\xd4\xa6\x31\x68\x65\x01\xab\x3c\x67\x74\xee\x1d\x1c\x8c\x54\x39\xab\xc3\x6e\xb3\x80\xaf\x3b\x2b\x1f\x3f\xcc\xe0\x39\x8a\x00\x00\x1a\xc6\x46\x31\xc6\x4a\x6b\xdf\xd1\x4a\xb5\x0a\x06\x43\x85\xff\x92\x04\x4a\x14\x90\x0a\x61\xd0\x77\xd0\xb4\x59\x6d\xf4\x30\x11\x65\xdf\x50\xcb\xd0\x53\xa3\x8c\xc5\x70\xe3\x05\x4e\xd2\xe3\x8c\xb3\x89\x45\x46\xcc\x74\x00\x05\x8c\x05\x32\x5a\x8d\x3e\xa5\x37\x75\xa6\xb4\xc8\x6f\x5d\x47\x43\x53\x5d\x63\x17\x76\xe2\x35\x5e\x3f\x60\x01\x37\x7e\x2c\x99\x07\xc9\xe5\x9b\xf0\x1c\xf3\xf5\x50\x73\x1b\x7b\xa8\x0b\x48\x9c\x10\xab\x12\x93\x50\x31\x16\xcc\x06\x71\xff\xdd\xdd\x41\xa3\xac\xd1\xf1\xd5\x9a\xda\x3a\x07\x4b\xf2\xc2\xb8\x74\x08\xd3\x8e\x23\x5d\x5d\x48\x7a\x42\xf8\x97\x02\xa3\x46\xf3\x03\xd9\x5d\x4a\x9b\x63\x43\xce\x48\x88\x3a\xf0\x9c\x97\x28\x6b\xd5\xa8\xcc\xd4\x46\x7e\xc5\x49\x90\xff\x4f\xb6\x01\xd2\xf3\x9f\xeb\x7d\xc6\xeb\x4b\xa7\x74\xbc\x8d\x5f\xc3\xa5\x4f\xf5\x12\x9a\x7e\x57\xbb\x86\x7e\xf9\x2f\x50\x9d\x10\xb1\x85\xc0\xf2\x7a\xba\x06\xf3\x5e\x2d\x3e\xff\x0b\x8c\xe7\xa9\xf5\x26\x30\x1d\x9c\x8d\x9d\x6e\xfc\xbf\xbd\xc7\x97\x98\x9f\x8e\xb1\x78\x78\x0b\x58\x5e\xdb\x42\x02\xaf\x63\x74\xfc\x1d\x00\x00\xff\xff\xf0\xa1\x8f\x63\x43\x04\x00\x00"

func TransactionsTransfer_nftCdcBytes() ([]byte, error) {
	return bindataRead(
		_TransactionsTransfer_nftCdc,
		"../../../transactions/transfer_nft.cdc",
	)
}

func TransactionsTransfer_nftCdc() (*asset, error) {
	bytes, err := TransactionsTransfer_nftCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../../transactions/transfer_nft.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbf, 0xcf, 0x5, 0x7d, 0x7, 0x3, 0x68, 0x8f, 0x6c, 0xaa, 0x67, 0x8a, 0xbb, 0x3b, 0x7d, 0x60, 0xe0, 0x6b, 0x65, 0xc, 0xc5, 0x7f, 0x99, 0x1f, 0xc, 0x6b, 0xa0, 0xb5, 0xac, 0xed, 0xa0, 0x15}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../../transactions/mint_nft.cdc":                       TransactionsMint_nftCdc,
	"../../../transactions/scripts/get_totalSupply.cdc":        TransactionsScriptsGet_totalsupplyCdc,
	"../../../transactions/scripts/read_collection_ids.cdc":    TransactionsScriptsRead_collection_idsCdc,
	"../../../transactions/scripts/read_collection_length.cdc": TransactionsScriptsRead_collection_lengthCdc,
	"../../../transactions/scripts/read_nft_by_id.cdc":         TransactionsScriptsRead_nft_by_idCdc,
	"../../../transactions/setup_account.cdc":                  TransactionsSetup_accountCdc,
	"../../../transactions/transfer_nft.cdc":                   TransactionsTransfer_nftCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": {nil, map[string]*bintree{
		"..": {nil, map[string]*bintree{
			"..": {nil, map[string]*bintree{
				"transactions": {nil, map[string]*bintree{
					"mint_nft.cdc": {TransactionsMint_nftCdc, map[string]*bintree{}},
					"scripts": {nil, map[string]*bintree{
						"get_totalSupply.cdc":        {TransactionsScriptsGet_totalsupplyCdc, map[string]*bintree{}},
						"read_collection_ids.cdc":    {TransactionsScriptsRead_collection_idsCdc, map[string]*bintree{}},
						"read_collection_length.cdc": {TransactionsScriptsRead_collection_lengthCdc, map[string]*bintree{}},
						"read_nft_by_id.cdc":         {TransactionsScriptsRead_nft_by_idCdc, map[string]*bintree{}},
					}},
					"setup_account.cdc": {TransactionsSetup_accountCdc, map[string]*bintree{}},
					"transfer_nft.cdc":  {TransactionsTransfer_nftCdc, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
