// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../../contracts/Cogito.cdc (4.994kB)
// ../../../contracts/NonFungibleToken.cdc (4.832kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cogitoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5d\x6f\xdb\xb8\x12\x7d\xf7\xaf\x98\xdb\x87\xd6\xee\x4d\xac\x5e\xe0\x62\x1f\x8c\x64\xd3\x6e\x9c\x00\x7e\xd8\xa0\x68\xbc\xd8\x87\xa2\x40\x69\x71\x6c\x73\x23\x91\x06\x49\xd9\xf5\x06\xf9\xef\x8b\x21\x29\x89\x94\x64\xb7\x0b\xd4\x58\x60\x63\x6b\x78\x66\x78\xe6\xcc\x87\x9a\xbd\x1d\x01\x00\xcc\xd1\xe4\x5a\xec\xac\x50\x72\x06\xb7\x28\xad\x66\x05\x3c\x96\x4c\x5b\xb8\x55\xf4\x2d\xb7\xb0\x56\x1a\x6e\xd5\x46\x58\x05\x77\x7a\xa3\xe0\xb1\x2a\x47\x6f\xb3\xd1\x48\x94\x3b\xa5\x2d\x3c\x28\x79\x5f\xc9\x8d\x58\x15\xb8\x54\x4f\x28\x61\xad\x55\x09\xef\xbe\x3d\xdc\x2f\x3f\xcc\xe7\x9f\xee\x1e\x1f\x47\xa3\x5d\xb5\x82\xbc\xc6\xf3\x58\xb3\xfe\xc1\xe7\x91\x8b\x29\xcb\xe0\xf2\xe7\x7c\x6a\xb8\x10\x7d\x13\xc1\xdd\x1e\xa5\x35\x3f\xdb\x59\x8d\x77\x57\x0a\x6b\x91\xc3\x61\x8b\x12\xec\x16\x7b\xee\x85\x81\x5c\x23\xb3\xc8\xdd\x11\x22\x07\x29\xa2\x86\xf2\x85\x14\x56\xb0\x42\xfc\x8d\x7c\x3c\x19\x84\x65\x90\x7b\x50\x61\xe0\x20\xec\x96\x6b\x76\x08\xcc\x33\xb8\x55\x45\x81\x39\xe5\xb4\x83\xff\x67\xb0\x1c\x0b\x3e\x83\x3f\x16\xd2\xfe\xf2\xff\x0b\x77\x68\x06\x1f\x38\xd7\x68\xcc\xcd\xf7\xdd\x71\xdc\x29\x23\xe8\x91\x90\x56\x9d\x73\x37\xf7\x96\x89\x37\x4a\x7c\xeb\xab\x77\x7f\x72\xf2\xbb\x90\x16\x79\x72\xaa\x44\xcb\x38\xb3\x6c\x06\x8f\x56\x0b\xb9\x99\x0c\x93\xcd\x6a\xaa\x5d\x98\xc6\x6a\x75\x1c\xe0\x98\x2c\xe6\xf5\xd3\xc8\x4d\x0b\xba\xdc\x22\x58\x65\x59\x01\xb2\x2a\x57\xa8\x41\xad\x6b\xe4\x87\xfb\xa5\x01\xbb\x65\x16\xb6\x6c\x8f\xb0\x42\x94\x49\x32\xb3\x0c\x7e\xc3\x9c\x55\x06\xbd\x69\xce\x24\xac\xb0\x8d\xe6\x02\x84\x05\xae\xd0\xc8\x37\x16\x24\xe6\x68\x0c\xd3\xa2\x38\x42\x89\x4c\x7a\x60\xbb\x15\x8d\x36\x35\xae\x89\x5b\xe3\x74\xd4\x0d\xc9\x39\x10\x12\xf0\x9b\x30\x16\x65\x8e\x17\xf0\x57\x65\xac\xb3\x0d\x56\x04\x58\x63\xb5\x01\x97\x8e\x61\xb0\x0a\x38\xb3\x38\x85\x0f\x85\x51\x50\x19\xe4\xc0\x0c\x6c\x0a\xb5\x62\x45\x9d\xf0\xc5\xdc\xb8\x06\x40\x47\x84\xdc\x4c\x1b\x36\xf7\x4c\xfb\x80\x1e\xab\xdd\xae\x38\xd6\x24\xb6\x29\xd5\x68\x54\xa5\x73\xc7\x43\xbf\xd8\xa7\x8b\x87\xfb\x25\x3c\x3b\xeb\xfa\x44\x81\x16\xda\x74\x8c\x92\x67\xe4\xae\xab\x82\xd6\x42\x48\x92\x99\x14\x76\x31\x3f\x23\x9a\xc8\x1d\x7d\x0c\x16\xeb\xa9\xe0\x70\x0d\xfe\x64\xff\x61\x8d\x00\xd7\x0d\xd8\x28\xb1\xc2\x52\x0c\xa8\x36\x00\xc7\x11\x24\x70\x93\x06\xe3\xa5\x85\xcb\x32\x58\xac\xe3\x76\x11\x6b\xf8\xc2\x7b\x62\x32\x88\x98\x1e\x4b\x2e\x72\x66\x31\x06\xb0\x0a\x54\x65\x8d\xe0\x08\x6a\x65\x50\xef\x51\x07\xb1\x0a\xd2\xab\xf1\xd9\x4f\x2b\x83\x3e\xe1\x97\x71\x97\xa1\xe8\x7a\x69\xc1\x84\x1b\xc6\x17\x89\xae\x93\x64\xbf\xed\x0e\x03\x22\xf8\xa8\xd5\x5e\x70\xd4\x17\xfd\x47\x9f\x30\x47\xb1\x1f\x7c\xd4\x42\x7e\xac\x56\x85\xc8\xa3\xa8\xb3\x0c\xb8\x70\x8f\x98\x3e\x86\x1a\xa1\xc6\xbb\x56\xba\x14\x72\x03\x96\x00\x4c\x6c\x4e\x06\xc2\x00\x6b\x23\xb6\xc7\x1d\xba\xa6\x4a\x7c\x7f\xf5\x6a\xfa\x0a\x8b\x39\xac\x05\x16\xbc\xa7\x4a\x75\x90\xc8\xa9\x14\x67\xf0\xfe\xd9\x5b\x0f\xdc\xf4\xe1\x7e\xf9\x92\xea\x15\x7a\x74\x3b\x56\x1b\x38\xb8\xba\x84\xe7\x97\x13\x52\xa9\x7b\x3e\x68\x2c\xd5\x1e\x0d\x85\x4a\x37\x71\x13\x80\x44\x94\x37\x1c\x01\x93\x1c\xbc\x91\x70\xca\x71\x8f\x59\x51\xa0\x4e\xee\xb2\xae\x64\x03\x3b\xae\xff\x68\xeb\x69\x32\x83\xf7\x43\xb7\xea\xdc\x81\x6a\xd8\x91\x4c\xe1\xa7\x17\x9a\xfa\x58\xc7\x4f\x78\x9c\x41\xeb\x60\x02\x37\x37\xb0\x63\x52\xe4\xe3\x57\xa5\x30\x86\xd2\xf4\x70\xbf\x7c\x35\x19\x28\xb5\x64\x80\x39\x37\xae\xce\xfc\x08\x6b\xbc\xe9\x9b\x29\xf3\x23\xa6\x83\xa1\xd1\x56\x9a\x22\x73\x47\x4f\x50\x1b\xe6\x1b\x58\xf6\x44\xbc\x3a\x5a\x89\x42\xc6\x79\xc2\x60\x43\xb0\x89\x24\x17\x03\x35\x87\xc8\x7c\x31\xaf\x0f\x0a\x0e\x4c\x6b\x76\xec\x91\x1f\x1c\x8f\x5d\x70\x27\xd8\xee\x4a\x26\xa1\xdb\xff\xc1\xcc\x7f\xe0\xbd\x2f\x5a\x3a\x31\xea\xd9\xb7\x2d\x16\xae\x1b\x12\x53\x33\x8a\x9e\x73\x3f\x48\xf0\x10\x80\x43\xfc\x51\x7d\x1d\xb6\x22\xdf\x36\x12\xa4\x87\xaa\xe0\xa0\x24\xf6\x7c\xaa\x82\x2f\x87\x55\xf1\x59\xf0\x2f\x4d\xf0\x03\x29\x8f\x97\x08\xca\x35\x2d\x10\xdf\xcf\x74\xe8\x68\x8d\xdf\x13\xb9\xde\xa0\xa5\x01\xe7\x75\xe1\x8a\xc8\xa5\x86\x1a\x87\x4f\x5a\x68\x9f\x4c\x23\x0d\xda\x34\xef\xbd\x04\x7a\xb4\xf1\x64\x06\x9f\x3d\xbf\x5f\x3a\xd9\x0a\xfa\xeb\x94\xc5\x13\x1e\xcd\x89\xf8\x56\x4a\x6b\x75\x20\x05\x6e\xd0\xfa\x26\xb5\x46\x4d\xa3\x9e\xb2\x11\x6a\xfe\x74\x60\x59\x06\x46\xd5\x4b\x45\x5d\xf4\x6e\x25\xd1\xc8\x38\x08\x6b\x9a\x11\xe5\xd4\x4a\x06\xf5\xaf\x5b\xc5\x4d\xef\x86\x4d\x3c\xf1\xda\x34\x83\xd7\x3f\xd0\x18\xc2\xdd\x5f\x0f\x64\x9f\x99\x61\x84\x21\x52\x4e\x8d\xaa\x3a\xe1\x29\xfc\xf0\x7c\xca\x32\xba\x10\x0d\x8e\x75\x25\x7d\x8f\xf4\x59\x96\x47\x25\xd1\xf1\xe3\x98\xa0\x9d\xdd\xad\x76\xc0\x5c\x19\x60\xb9\xb3\xc7\x2e\xcf\x35\x35\xde\xf2\x8e\x4c\xda\xf9\x34\x1e\xec\x9a\xed\xf3\xe8\x12\x4d\x6f\xaa\x7d\xc6\x28\xdd\xe9\xda\x3a\x7c\xc0\x83\xdb\x3c\xb4\x73\x15\xca\x3e\xda\x48\xf4\x79\x17\xad\x5d\xea\x24\xcb\xe0\x53\x33\x0f\x3d\x37\xc0\x78\x29\x24\x28\x0d\x46\x91\x3e\xa8\x4f\x1b\x51\x8a\x82\x69\x38\xa8\x8a\x0a\xff\xe0\x9a\xc4\x0a\x6b\x08\xb6\x2a\x9c\x50\x69\x79\x74\x0c\x36\x39\xc9\xb2\xa1\x4d\x21\x89\x3a\x56\x31\x01\x90\xa4\xe8\xff\x26\x64\x83\xbe\xfb\x29\xed\xbe\x46\xfb\x5b\xe8\xbd\x75\x23\xa7\xff\x7c\x89\x68\xcc\xc5\x4e\xd0\xbb\x5f\x3c\x1f\x2b\x37\x72\xec\x16\x85\x8e\x7f\x6e\x4a\xad\x57\x05\x21\x9a\x71\x03\x37\x83\xd7\xcf\xdf\xdd\x52\x5e\x86\x37\xd2\x6e\xdf\x4d\x14\x17\x17\x01\x7d\x68\xdf\x90\xe8\x1a\x42\x9b\x45\x57\x8e\x61\xf7\x0d\x02\x88\x16\xf3\xd8\x6b\xbb\x80\x76\xbd\x9e\xe1\xea\x8d\x01\x96\xe7\xaa\x92\x36\x61\xaa\x4f\x8f\x97\x58\x38\x35\xed\x4c\xb3\xab\x4b\x1f\x77\xc7\x75\x3f\x5e\xb8\x1e\xfa\xf1\xbf\x30\xfe\x1f\xf5\x89\xfa\x4d\x6d\xb0\xae\xdd\x5b\xc0\x24\xdd\x06\xdb\x57\xe9\xe8\x15\xca\x38\xd0\xc6\xcc\xf5\x8c\x34\x84\x77\x89\xfc\x6e\xeb\x9c\xdc\xc6\xf2\x08\xb2\x25\xa9\x19\x7a\xb5\xf2\xbb\x81\xb1\x4a\xb3\x4d\xcb\x0a\x4d\xbf\x48\x55\x67\xea\xbb\x09\x25\xd0\x3d\x25\xd4\xf1\xd5\x65\x7b\xda\x4f\xbf\x2c\xb8\xc8\x3c\x4f\x2d\xce\x24\x09\xba\x11\x52\xe8\x75\x39\xdb\xb1\x95\x28\x84\x3d\xba\x17\xba\x13\x23\x23\x09\xa0\x10\xf2\xe9\xea\x47\xa4\xfd\xeb\x38\x15\x94\x77\xd9\x0b\xf0\x22\xb1\xb2\x4c\x6f\xd0\x9e\xb9\x4f\x63\x3d\x19\xce\x46\x68\x15\xff\x26\x13\xa5\x3f\x72\xb6\x05\x9e\xca\x83\x3f\x3b\x98\x03\x7f\x3e\x0a\x33\xbc\x39\x9d\xfa\xe7\x9c\x97\xd1\xcb\xe8\x9f\x00\x00\x00\xff\xff\xdb\xa7\x0b\x49\x82\x13\x00\x00"

func cogitoCdcBytes() ([]byte, error) {
	return bindataRead(
		_cogitoCdc,
		"Cogito.cdc",
	)
}

func cogitoCdc() (*asset, error) {
	bytes, err := cogitoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Cogito.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf4, 0x3b, 0xa5, 0xdb, 0xa6, 0x6e, 0x71, 0x9f, 0xd6, 0x9f, 0x3, 0xcb, 0xff, 0xe, 0x47, 0x82, 0x2e, 0xa7, 0xda, 0xc3, 0xe2, 0xd6, 0x64, 0xe7, 0xa4, 0xe0, 0x56, 0x67, 0xa3, 0x3f, 0x6e, 0xa2}}
	return a, nil
}

var _nonfungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x41\x8f\xdb\xba\x11\xbe\xeb\x57\xcc\xcb\x03\x9a\xdd\xc0\x6b\xf7\x50\xf4\x60\x20\x68\xda\xb7\x6f\x01\x5f\xb6\x0f\x5b\x17\x3d\x04\x01\x4c\x8b\x23\x9b\x08\x45\x2a\x24\x65\xc7\x0d\xf6\xbf\x17\x33\x24\x25\xca\xf6\x26\x9b\x5b\x73\x89\x57\x22\xbf\x99\xf9\xe6\x9b\x8f\xd4\xe2\xdd\xbb\xaa\xfa\xf5\x57\x58\xef\x11\x1e\xb4\x3d\xc2\xa3\x35\x77\x0f\xbd\xd9\xa9\xad\x46\x58\xdb\xcf\x68\xc0\x07\x61\xa4\x70\x92\x17\x6e\x1e\xad\xc9\xef\xf9\xf5\x06\x6a\x6b\x82\x13\x75\x00\x65\x02\xba\x46\xd4\x58\x55\x84\x37\xfc\x09\x61\x2f\x02\x08\xad\xc1\x58\x73\xd7\x64\xf4\xc0\xe8\x79\xb7\x87\xda\xf6\x5a\xd2\xdf\x8d\x75\x2d\x04\x3b\xaf\x56\x0d\x08\xe8\x3d\x3a\x38\x0a\x13\x3c\x04\x0b\x12\x3b\x6d\x4f\x20\xc0\xe0\x11\x4c\x13\x86\xfd\x33\x08\x7b\x54\x6e\xcc\xe6\xc8\x70\x06\x51\x56\xc1\x82\x6a\x3b\x8d\x2d\x9a\x40\xcb\xe0\xbc\x88\x31\xd7\x39\xe7\x7e\x89\xb3\x17\x07\xca\x18\x1a\xab\x89\x26\x2a\x86\x80\x5c\xaf\xd1\x83\x30\x12\x8c\x68\x95\xd9\x55\x5c\x6a\x98\x54\xef\x3b\xac\x55\xa3\xd0\xcf\x13\x83\x0f\xeb\x0d\x38\xf4\xb6\x77\x99\xaa\xda\x3a\x1c\x1e\x41\x38\x75\x89\x33\x87\x9d\x43\x8f\x54\xbb\x30\xf0\xf8\xb0\x06\x65\x18\xdd\xb7\xc2\x8d\xb5\x27\xe0\xdf\xac\xd6\x58\x07\x65\xcd\x06\x9e\x26\xf8\x23\x34\xa1\xfa\x60\x1d\x65\xcd\xd4\xbe\xf5\x8c\x5b\x0f\x7b\xe7\xd5\x8a\x5a\x59\xeb\x5e\xf2\xa2\x06\x8f\xd0\xf4\x86\xdf\x71\x0b\x04\x33\x40\x59\xd8\xa3\x41\x47\x8f\x50\x78\xa5\x4f\x55\x6b\x0f\xa9\xad\x9e\x12\x25\x5a\x6c\x1f\xc0\x36\xbc\xba\x0c\xc1\xf9\xfe\xe1\xec\x41\x49\x74\x1b\x5e\xb9\x79\xc2\x1a\xd5\x81\xfe\x1c\xd2\x1d\x48\xf4\x5c\x87\x2f\x9f\x80\xc4\x5a\x0b\x87\x45\x72\x47\x15\xf6\xe0\x6d\x8b\xd0\x39\x64\xd0\xce\x7a\xa6\x49\x2a\x5e\x51\x25\x56\xbf\xf4\xca\x21\x27\x35\x72\x56\x74\xb7\x46\x17\x84\x32\xa9\xa7\x0c\xb4\xc5\xbd\x38\x28\xeb\x86\x69\xf0\x51\x29\x27\xa0\x14\x3c\x76\xc2\x89\x80\xb0\xc5\x5a\xf4\x94\x66\x80\x9d\x3a\xa0\xe7\x18\xac\x60\xfa\x21\xb6\x4a\xab\x70\xa2\x48\x7e\x4f\xfb\x04\x38\x6c\xd0\xa1\xa9\x91\x44\x1a\x15\x5c\xa6\x44\xe9\x5a\xa3\x4f\x80\x5f\x3b\xeb\x13\x5e\xa3\x50\xcb\xa8\xba\xb1\x76\x65\xc0\x1a\x04\xeb\xa0\xb5\x0e\xab\xc4\xf9\x48\xd7\x1c\x56\x34\x83\xde\xa6\xc4\x28\x29\x7f\x9e\x55\x2b\x3e\x23\xd4\xbd\x0f\xb6\x1d\x9a\x90\x48\x9b\x0c\xd0\xb4\x11\x34\x96\x16\x0e\xc2\x29\xdb\x13\xa4\x32\xbb\xd4\x0b\x82\x8f\x7a\x98\x57\xd5\x3f\x4e\xd0\x7b\xe2\x73\x40\xe6\x12\x46\xa0\x59\x4a\xca\x36\x2c\xc9\xa9\xc6\x3d\xd4\xc2\x80\x47\x23\x2b\xda\xe5\xa2\x58\xb2\xda\x3a\x44\x77\x17\xec\x1d\xfd\x3f\xe3\xd8\x24\x3c\x6a\x99\xd9\x51\x7e\x1c\x84\xa7\x99\xd2\x12\x50\x23\xa1\x6a\xd0\x28\x77\xe8\xaa\x8b\x71\x5a\x5b\x0e\x95\xa7\x8e\x54\x6f\x6c\xd8\xa3\xe3\x14\x67\x83\x2d\xb1\x37\x78\xe2\xe6\xc4\xd0\xd2\x89\x38\x1a\x8f\x0f\xeb\xaa\x71\xb6\xbd\xe8\x29\xfb\x94\x81\x3a\x3b\x88\xc4\xce\x7a\x15\x86\x4e\x82\x35\x93\x58\x6f\x7d\x35\xd5\x68\x6d\xa9\x13\x21\xca\x37\x38\x61\x7c\x83\x6e\x5e\x55\xef\x16\x55\xb5\x58\xb0\x93\xb7\x24\xde\x38\xd5\xe7\xd6\x3c\x87\x7f\x32\x74\xf9\x96\x9a\xa5\x35\x6d\x56\x6d\x67\x5d\x88\x6d\x29\xfa\xad\x7c\xe1\xed\x8b\x45\xd5\xf5\xdb\x2b\xd0\x97\xae\xfa\xad\xaa\x00\x00\x52\x56\xc1\x06\xa1\xc1\xf4\xed\x16\x1d\x7b\x42\x6c\x1d\x2b\x55\xf9\xe8\x7a\xca\x00\x7e\x55\x3e\xf0\x44\xd0\x5e\x0a\x75\x10\x2e\x6e\xfe\x57\xdf\x75\xfa\xb4\x84\x7f\xaf\x4c\xf8\xeb\x5f\x06\xf0\xdf\x0f\x31\x4d\x11\x00\x5b\x15\x02\x4a\x38\x12\xc7\xa9\x0f\x45\xaa\x54\x87\x0a\x4a\x68\xf5\x5f\x94\x69\xfb\x10\x06\x19\xe6\xb7\xb4\x78\x35\x2e\xbc\xb9\xbd\x16\x4a\xf9\x69\x34\x91\x0e\x34\xe5\x07\x25\x98\x59\xde\xa7\x8c\x54\xb5\x08\xac\xc6\xc1\x38\x2f\x7c\x31\x01\x07\x38\x8a\x02\x04\x48\x47\xf3\x32\xdb\xc5\x02\x56\x17\x7b\x95\x07\x63\x43\xf4\x5d\x10\x75\x6d\x7b\x13\xde\x7a\x36\x7b\xb1\xc3\x19\x6c\x08\x66\xc3\xad\x86\x2d\xc2\xc6\x28\xbd\x99\x5f\xe7\xe0\x3f\x29\xf4\x8d\x92\x99\xec\x19\x67\xb1\x84\xbf\x4b\xe9\xd0\xfb\xbf\x5d\xa5\xe4\x25\x3e\x92\xc6\x51\xf2\x20\x4d\x0e\x82\xb3\xaa\x42\x66\x2a\x59\xdd\x6b\x88\x2a\xd1\x5f\x28\xe8\x3e\x2e\x99\xd4\x13\xec\xb5\x6a\x56\xd3\x4b\x4b\x92\x90\x1f\xce\xff\xf1\x7a\x72\x1e\xe9\xf2\xd0\x82\x15\xa9\xef\x1b\xaf\x28\xe6\xa0\x37\xea\x4b\x8f\xb0\xba\x4f\xa4\x89\x7a\xcf\x32\xdd\x0b\x3f\x2c\x25\x40\x8d\x01\xc6\x84\xf9\xd5\xf3\x90\xe7\x53\x3c\xc3\xda\x81\x7b\xf2\x93\x94\x1c\xa9\xec\x9a\x81\x52\x0d\x79\x3f\x5f\xa5\x1a\x65\xe2\x19\x94\x32\x27\x53\x42\x19\x1d\x8f\x30\x13\x1e\x3b\x3c\xd5\x72\x59\xeb\xe3\xc3\x7a\x79\x5e\xe6\x0f\x73\x2f\x38\xb6\xd0\xa2\x54\x74\x72\x66\xb9\x7b\xc8\xb6\x59\x98\xe6\x2b\xb8\xce\x97\x89\x29\xdf\x83\x27\x3b\xa4\xcb\xc9\x70\x8d\x1a\x62\x14\x9a\x22\xd7\x8b\x8b\x54\x80\x78\x1a\x47\x46\xdc\xa4\xb4\xa6\x37\x03\xec\x4d\xfe\xb1\xba\xcf\xb5\xde\x2e\xe1\xc3\x94\x0f\xde\x48\xf7\x90\xe9\x23\xfa\xe7\xd0\xf7\x3a\xcc\x95\x84\xf7\xef\xa1\xc4\x7a\x43\x42\x59\xdd\x67\xe5\x8f\x5e\x10\x67\xaa\xed\x7d\xa0\x21\xe6\xab\xa0\x68\x11\x44\x1c\x17\xba\xd9\xa0\xa7\x51\x58\xdd\xbf\x99\x44\x7b\xae\xa6\xbf\x7e\xd0\x8d\x34\x53\x3e\xf3\xf0\x53\xad\xc8\x17\xb9\xec\xff\x29\x50\x3e\xe9\x82\xf8\x3c\x36\x42\xf0\x2f\xe1\x76\x3d\x4b\x99\x7a\x20\xa4\x2c\x5b\x70\x16\xba\x08\x5f\x76\x24\x81\xdf\x30\x3f\xb1\x05\xb7\x2f\x17\xca\x03\x33\xb8\x64\x3a\xc6\x6b\xdb\xb6\x7c\xd7\xca\x1b\xba\x7e\xab\x95\xdf\x43\x63\xdd\xf0\x71\x31\xc9\xe5\x85\xfa\xc7\x8c\xff\x20\x84\xfa\x6c\x36\xbe\x9b\x6e\xb9\x68\x87\x61\x75\xef\x6f\x6e\x97\xf0\x31\x6a\xeb\xd3\xc5\x92\xad\x75\xce\x1e\x1f\x1f\xd6\x85\xb5\xdd\x2e\xe1\x4f\x79\x58\xaf\x1b\x46\x2a\x28\x0d\x80\xa9\x1d\x5d\x27\x26\x9f\x1f\x85\x4d\x6c\x31\xdf\xb4\x65\xfe\xfa\x18\xee\x06\xe4\x34\xd9\x5f\x5e\x14\xc6\x48\xc7\x72\x98\xd2\xd9\x20\x92\xd9\x35\xba\x4a\xd9\xdc\x2b\x7e\x27\x1c\xdf\x50\xf7\x56\xcb\xd1\x95\x53\x3e\x57\x24\x92\xef\x0d\x74\x80\x48\x5a\xbb\x84\x0f\xdf\x22\x3f\x4b\xda\xfb\x5c\xfd\x5f\xd8\xc4\xf7\x06\x24\xce\xc7\xe5\x40\x8c\xb9\x78\x90\x03\x39\x25\xd0\xb0\x29\x44\x17\x49\x1b\x95\x04\xe1\x9c\x38\xbd\x4e\x8d\x25\x60\x54\x22\x38\x0c\xbd\x33\x69\x62\x9d\x38\x65\x7b\xa2\x77\x71\xa6\x1c\xe6\x9e\xd4\xd7\x7b\xf2\x82\xae\xcb\x60\x4f\x39\x4a\x52\x37\xca\xf1\x2b\x29\xde\xc4\xcb\x2f\xe1\x2b\x71\x16\x0b\xf0\x76\x3c\xbf\x63\x73\xf8\xf3\xc1\xa1\x90\x20\x45\x10\x4c\x11\xdf\xc1\x5b\x0c\x7b\x2b\xd3\xa9\xa3\xc2\xcf\x4c\xd8\xb9\xc7\x3b\xbc\x62\xf1\x1e\x75\x33\x1f\x54\xf8\x51\xc9\x4f\xf0\xcb\x7b\x30\x4a\x2f\xe1\x0d\x61\x48\x8b\xf1\xe2\xc6\xf7\xde\xcb\xaa\x7e\x79\xad\x8f\xd7\x0e\x45\xc0\xdf\xdb\x2e\x9c\x8a\x0f\x86\xf8\x94\x5b\x86\xf4\xea\xd2\xc9\x21\x7e\x4e\x45\xce\xcf\x25\x5d\x12\x79\x62\x0a\xed\x91\xe9\xf7\x55\x49\xd2\xd5\xd8\xd4\xe0\x0f\x45\x2a\x85\x0b\x5e\x9e\x86\xe9\x24\xcc\xd2\x98\x6b\x34\xbb\xb0\xa7\x63\xf1\xcf\xe9\x34\x8c\x31\x64\x39\x8a\xf9\x18\xe4\xca\x0a\xa2\x32\x35\xcf\xd5\xff\x02\x00\x00\xff\xff\x33\x4d\x81\x27\xe0\x12\x00\x00"

func nonfungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_nonfungibletokenCdc,
		"NonFungibleToken.cdc",
	)
}

func nonfungibletokenCdc() (*asset, error) {
	bytes, err := nonfungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "NonFungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdb, 0x61, 0xca, 0x9d, 0xaa, 0x66, 0x36, 0xdf, 0xbc, 0x51, 0xdb, 0x7b, 0x51, 0xd8, 0x3d, 0x6f, 0x4e, 0x9c, 0x8e, 0x50, 0x28, 0x7c, 0x18, 0x1d, 0x2, 0xb2, 0xc2, 0x2b, 0x26, 0xa1, 0xfe, 0x2d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Cogito.cdc":           cogitoCdc,
	"NonFungibleToken.cdc": nonfungibletokenCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Cogito.cdc":           {cogitoCdc, map[string]*bintree{}},
	"NonFungibleToken.cdc": {nonfungibletokenCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
